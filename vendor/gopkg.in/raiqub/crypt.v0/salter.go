/*
 * Copyright (C) 2015 Fabr√≠cio Godoy <skarllot@gmail.com>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

package crypt

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"io"
)

const (
	// DefaultTokenSize defines default size for tokens generated by Salter to
	// 512 bits.
	DefaultTokenSize = 64
)

// A Salter provides a random data generator to password salt and unique session
// IDs.
type Salter struct {
	salt []byte
	rnd  io.Reader
}

// NewSalter creates a new instance of Salter. It requires a io.Reader which
// provides random data and optionally an input to salt next token.
func NewSalter(rnd io.Reader, input []byte) *Salter {
	if input == nil {
		input = []byte("")
	}

	hash := sha256.New()
	hash.Write(input)

	return &Salter{
		salt: hash.Sum(nil),
		rnd:  rnd,
	}
}

// BToken generates an array of random bytes with length as specified by size
// parameter.
//
// To use default token size the size parameter must be set to zero.
//
// Returns ErrUnexpectedEOF when random source cannot deliver enough bytes.
func (s *Salter) BToken(size int) ([]byte, error) {
	if size < 1 {
		size = DefaultTokenSize
	}

	mac := hmac.New(sha256.New, s.salt)
	buf := make([]byte, size)

	_, err := io.ReadFull(s.rnd, buf)
	if err != nil {
		return nil, err
	}

	mac.Write(buf)
	macSum := mac.Sum(nil)
	s.salt = macSum

	return macSum, nil
}

// Dispose closes reader if it implements io.Closer.
func (s *Salter) Dispose() {
	if s.rnd == nil {
		return
	}

	if closer, ok := s.rnd.(io.Closer); ok {
		closer.Close()
	}
	s.rnd = nil
}

// Token generates a base-64 string of random bytes with length as specified by
// size parameter.
//
// To use default token size the size parameter must be set to zero.
//
// Returns ErrUnexpectedEOF when random source cannot deliver enough bytes.
func (s *Salter) Token(size int) (string, error) {
	token, err := s.BToken(size)
	if err != nil {
		return "", err
	}

	return base64.URLEncoding.EncodeToString(token), nil
}
